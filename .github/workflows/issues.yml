name: Update JSON with issues

on:
  repository_dispatch:
    types: [update-json]

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Fetch and log issue labels
      id: label_check
      run: |
        # Fetch issues
        response=$(curl -s -H "Authorization: token ${{ secrets.ORG_GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.event.client_payload.repo_with_owner }}/issues")

        echo "Repository: ${{ github.event.client_payload.repo_with_owner }}"
        
        # Print response to the logs
        echo "API Response:"
        echo "$response"
                
        # Check if the response is successful (HTTP status code 200)
        if [ $? -eq 0 ]; then
          # Use jq to extract new_feature labels and format them as JSON array
          new_feature_labels=$(echo "$response" | jq -r '[.[] | select(.labels[].name == "new_feature") | {title: .title, color: .labels[].color}]')
          
          if [ -n "$new_feature_labels" ]; then
            echo "New feature label found. Updating JSON file..."
            # Write the new feature label information to the existing JSON file
            echo "$new_feature_labels" > static/issues.json
            echo "::set-output name=labels_found::true"  # Set an output variable
          else
            echo "No new feature label found or issue not closed."
            echo "::set-output name=labels_found::false"  # Set an output variable
          fi
        else
          echo "Error: Unable to fetch issues or invalid response."
          echo "::set-output name=labels_found::false"  # Set an output variable
        fi

    - name: Commit changes
      if: steps.label_check.outputs.labels_found == 'true'  # Run only if labels were found
      run: |
        git config --global user.email "no-reply@github.com"
        git config --global user.name "GitHub Actions"
        git add static/issues.json
        git commit -m "Update issues.json"
        git push origin HEAD:${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
